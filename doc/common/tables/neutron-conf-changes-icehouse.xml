<?xml version='1.0' encoding='UTF-8'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="neutron-conf-changes-icehouse">
  <!-- Warning: Do not edit this file. It is automatically generated and your changes will be overwritten. The tool to do so lives in the openstack-doc-tools repository. -->
  <title>New, updated and deprecated options for neutron</title>
  <table>
    <caption>New options</caption>
    <col width="50%"/>
    <col width="50%"/>
    <thead>
      <tr>
        <td>Option = default value</td>
        <td>(Type) Help string</td>
      </tr>
    </thead>
    <tr>
      <td>auth_ca_cert = None</td>
      <td>(StrOpt) Certificate Authority public key (CA cert) file for ssl</td>
    </tr>
    <tr>
      <td>auth_insecure = False</td>
      <td>(BoolOpt) Turn off verification of the certificate for ssl</td>
    </tr>
    <tr>
      <td>ca_certs = None</td>
      <td>(StrOpt) CA certificates</td>
    </tr>
    <tr>
      <td>ctl_cert = None</td>
      <td>(StrOpt) controller certificate</td>
    </tr>
    <tr>
      <td>ctl_privkey = None</td>
      <td>(StrOpt) controller private key</td>
    </tr>
    <tr>
      <td>default_service_cluster_uuid = None</td>
      <td>(StrOpt) Unique identifier of the Service Cluster which will be used by logical services like dhcp and metadata</td>
    </tr>
    <tr>
      <td>dnsmasq_dns_servers = None</td>
      <td>(ListOpt) Comma-separated list of the DNS servers which will be used as forwarders.</td>
    </tr>
    <tr>
      <td>log_config_append = None</td>
      <td>(StrOpt) The name of logging configuration file. It does not disable existing loggers, but just appends specified logging configuration to any other existing logging options. Please see the Python logging module documentation for details on logging configuration files.</td>
    </tr>
    <tr>
      <td>max_header_line = 16384</td>
      <td>(IntOpt) Max header line to accommodate large tokens</td>
    </tr>
    <tr>
      <td>max_request_body_size = 114688</td>
      <td>(IntOpt) the maximum body size per each request(bytes)</td>
    </tr>
    <tr>
      <td>metadata_backlog = 128</td>
      <td>(IntOpt) Number of backlog requests to configure the metadata server socket with</td>
    </tr>
    <tr>
      <td>metadata_workers = 0</td>
      <td>(IntOpt) Number of separate worker processes for metadata server</td>
    </tr>
    <tr>
      <td>notify_nova_on_port_data_changes = True</td>
      <td>(BoolOpt) Send notification to nova when port data (fixed_ips/floatingip) changes so nova can update its cache.</td>
    </tr>
    <tr>
      <td>notify_nova_on_port_status_changes = True</td>
      <td>(BoolOpt) Send notification to nova when port status changes</td>
    </tr>
    <tr>
      <td>nova_admin_auth_url = http://localhost:5000/v2.0</td>
      <td>(StrOpt) Authorization URL for connecting to nova in admin context</td>
    </tr>
    <tr>
      <td>nova_admin_password = None</td>
      <td>(StrOpt) Password for connection to nova in admin context</td>
    </tr>
    <tr>
      <td>nova_admin_tenant_id = None</td>
      <td>(StrOpt) The uuid of the admin nova tenant</td>
    </tr>
    <tr>
      <td>nova_admin_username = None</td>
      <td>(StrOpt) Username for connecting to nova in admin context</td>
    </tr>
    <tr>
      <td>nova_region_name = None</td>
      <td>(StrOpt) Name of nova region to use. Useful if keystone manages more than one region.</td>
    </tr>
    <tr>
      <td>nova_url = http://127.0.0.1:8774/v2</td>
      <td>(StrOpt) URL for connection to nova</td>
    </tr>
    <tr>
      <td>nsx_controllers = None</td>
      <td>(ListOpt) Lists the NSX controllers in this cluster</td>
    </tr>
    <tr>
      <td>nsx_password = admin</td>
      <td>(StrOpt) Password for NSX controllers in this cluster</td>
    </tr>
    <tr>
      <td>nsx_user = admin</td>
      <td>(StrOpt) User name for NSX controllers in this cluster</td>
    </tr>
    <tr>
      <td>ofp_listen_host = </td>
      <td>(StrOpt) openflow listen host</td>
    </tr>
    <tr>
      <td>ofp_ssl_listen_port = 6633</td>
      <td>(IntOpt) openflow ssl listen port</td>
    </tr>
    <tr>
      <td>ofp_tcp_listen_port = 6633</td>
      <td>(IntOpt) openflow tcp listen port</td>
    </tr>
    <tr>
      <td>ovs_vsctl_timeout = 10</td>
      <td>(IntOpt) Timeout in seconds for ovs-vsctl commands</td>
    </tr>
    <tr>
      <td>rpc_workers = 0</td>
      <td>(IntOpt) Number of RPC worker processes for service</td>
    </tr>
    <tr>
      <td>send_events_interval = 2</td>
      <td>(IntOpt) Number of seconds between sending events to nova if there are any events to send.</td>
    </tr>
    <tr>
      <td>AGENT/get_datapath_retry_times = 60</td>
      <td>(IntOpt) Number of seconds to retry acquiring an Open vSwitch datapath</td>
    </tr>
    <tr>
      <td>AGENT/integration_bridge = br-int</td>
      <td>(StrOpt) integration bridge</td>
    </tr>
    <tr>
      <td>CISCO/nexus_l3_enable = False</td>
      <td>(BoolOpt) Enable L3 support on the Nexus switches</td>
    </tr>
    <tr>
      <td>ESWITCH/apply_profile_patch = False</td>
      <td>(BoolOpt) Enable server compatibility with old nova</td>
    </tr>
    <tr>
      <td>META/rpc_flavor = </td>
      <td>(StrOpt) Flavor of which plugin handles RPC</td>
    </tr>
    <tr>
      <td>MLNX/physical_network_type = eth</td>
      <td>(StrOpt) Physical network type for provider network (eth or ib)</td>
    </tr>
    <tr>
      <td>MLNX/physical_network_type_mappings = []</td>
      <td>(ListOpt) List of &lt;physical_network&gt;:&lt;physical_network_type&gt;  with physical_network_type is either eth or ib</td>
    </tr>
    <tr>
      <td>NOVA/node_override_vif_hostdev = []</td>
      <td>(ListOpt) Nova compute nodes to manually set VIF type to hostdev</td>
    </tr>
    <tr>
      <td>NOVA/node_override_vif_midonet = []</td>
      <td>(ListOpt) Nova compute nodes to manually set VIF type to midonet</td>
    </tr>
    <tr>
      <td>NOVA/node_override_vif_mlnx_direct = []</td>
      <td>(ListOpt) Nova compute nodes to manually set VIF type to mlnx_direct</td>
    </tr>
    <tr>
      <td>NSX/agent_mode = agent</td>
      <td>(StrOpt) The mode used to implement DHCP/metadata services.</td>
    </tr>
    <tr>
      <td>NSX/concurrent_connections = 10</td>
      <td>(IntOpt) Maximum concurrent connections to each NSX controller.</td>
    </tr>
    <tr>
      <td>NSX/default_transport_type = stt</td>
      <td>(StrOpt) The default network tranport type to use (stt, gre, bridge, ipsec_gre, or ipsec_stt)</td>
    </tr>
    <tr>
      <td>NSX/max_lp_per_bridged_ls = 5000</td>
      <td>(IntOpt) Maximum number of ports of a logical switch on a bridged transport zone (default 5000)</td>
    </tr>
    <tr>
      <td>NSX/max_lp_per_overlay_ls = 256</td>
      <td>(IntOpt) Maximum number of ports of a logical switch on an overlay transport zone (default 256)</td>
    </tr>
    <tr>
      <td>NSX/metadata_mode = access_network</td>
      <td>(StrOpt) If set to access_network this enables a dedicated connection to the metadata proxy for metadata server access via Neutron router. If set to dhcp_host_route this enables host route injection via the dhcp agent. This option is only useful if running on a host that does not support namespaces otherwise access_network should be used.</td>
    </tr>
    <tr>
      <td>NSX/nsx_gen_timeout = -1</td>
      <td>(IntOpt) Number of seconds a generation id should be valid for (default -1 meaning do not time out)</td>
    </tr>
    <tr>
      <td>NSX/replication_mode = service</td>
      <td>(StrOpt) The default option leverages service nodes to perform packet replication though one could set to this to 'source' to perform replication locally. This is useful if one does not want to deploy a service node(s).</td>
    </tr>
    <tr>
      <td>NSX_DHCP/default_lease_time = 43200</td>
      <td>(IntOpt) Default DHCP lease time</td>
    </tr>
    <tr>
      <td>NSX_DHCP/domain_name = openstacklocal</td>
      <td>(StrOpt) Domain to use for building the hostnames</td>
    </tr>
    <tr>
      <td>NSX_DHCP/extra_domain_name_servers = []</td>
      <td>(ListOpt) Comma separated list of additional domain name servers</td>
    </tr>
    <tr>
      <td>NSX_LSN/sync_on_missing_data = False</td>
      <td>(BoolOpt) Pull LSN information from NSX in case it is missing from the local data store. This is useful to rebuild the local store in case of server recovery.</td>
    </tr>
    <tr>
      <td>NSX_METADATA/metadata_server_address = 127.0.0.1</td>
      <td>(StrOpt) IP address used by Metadata server.</td>
    </tr>
    <tr>
      <td>NSX_METADATA/metadata_server_port = 8775</td>
      <td>(IntOpt) TCP Port used by Metadata server.</td>
    </tr>
    <tr>
      <td>NSX_METADATA/metadata_shared_secret = </td>
      <td>(StrOpt) Shared secret to sign instance-id request</td>
    </tr>
    <tr>
      <td>NSX_SYNC/always_read_status = False</td>
      <td>(BoolOpt) Always read operational status from backend on show operations. Enabling this option might slow down the system.</td>
    </tr>
    <tr>
      <td>NSX_SYNC/max_random_sync_delay = 0</td>
      <td>(IntOpt) Maximum value for the additional random delay in seconds between runs of the state synchronization task</td>
    </tr>
    <tr>
      <td>NSX_SYNC/min_chunk_size = 500</td>
      <td>(IntOpt) Minimum number of resources to be retrieved from NSX during state synchronization</td>
    </tr>
    <tr>
      <td>NSX_SYNC/min_sync_req_delay = 1</td>
      <td>(IntOpt) Minimum delay, in seconds, between two state synchronization queries to NSX. It must not exceed state_sync_interval</td>
    </tr>
    <tr>
      <td>NSX_SYNC/state_sync_interval = 10</td>
      <td>(IntOpt) Interval in seconds between runs of the state synchronization task. Set it to 0 to disable it</td>
    </tr>
    <tr>
      <td>OFC/api_max_attempts = 3</td>
      <td>(IntOpt) Maximum attempts per OFC API request.NEC plugin retries API request to OFC when OFC returns ServiceUnavailable (503).The value must be greater than 0.</td>
    </tr>
    <tr>
      <td>OFC/insecure_ssl = False</td>
      <td>(BoolOpt) Disable SSL certificate verification</td>
    </tr>
    <tr>
      <td>OFC/path_prefix = </td>
      <td>(StrOpt) Base URL of OFC REST API. It is prepended to each API request.</td>
    </tr>
    <tr>
      <td>QUOTAS/quota_health_monitor = -1</td>
      <td>(IntOpt) Number of health monitors allowed per tenant. A negative value means unlimited.</td>
    </tr>
    <tr>
      <td>QUOTAS/quota_member = -1</td>
      <td>(IntOpt) Number of pool members allowed per tenant. A negative value means unlimited.</td>
    </tr>
    <tr>
      <td>QUOTAS/quota_pool = 10</td>
      <td>(IntOpt) Number of pools allowed per tenant. A negative value means unlimited.</td>
    </tr>
    <tr>
      <td>QUOTAS/quota_vip = 10</td>
      <td>(IntOpt) Number of vips allowed per tenant. A negative value means unlimited.</td>
    </tr>
    <tr>
      <td>RESTPROXY/auth_resource = </td>
      <td>(StrOpt) Nuage provided uri for initial authorization to access VSD</td>
    </tr>
    <tr>
      <td>RESTPROXY/auto_sync_on_failure = True</td>
      <td>(BoolOpt) If neutron fails to create a resource because the backend controller doesn't know of a dependency, the plugin automatically triggers a full data synchronization to the controller.</td>
    </tr>
    <tr>
      <td>RESTPROXY/base_uri = /</td>
      <td>(StrOpt) Nuage provided base uri to reach out to VSD</td>
    </tr>
    <tr>
      <td>RESTPROXY/cache_connections = True</td>
      <td>(BoolOpt) Re-use HTTP/HTTPS connections to the controller.</td>
    </tr>
    <tr>
      <td>RESTPROXY/consistency_interval = 60</td>
      <td>(IntOpt) Time between verifications that the backend controller database is consistent with Neutron</td>
    </tr>
    <tr>
      <td>RESTPROXY/default_floatingip_quota = 254</td>
      <td>(IntOpt) Per Net Partition quota of floating ips</td>
    </tr>
    <tr>
      <td>RESTPROXY/default_net_partition_name = OpenStackDefaultNetPartition</td>
      <td>(StrOpt) Default Network partition in which VSD will orchestrate network resources using openstack</td>
    </tr>
    <tr>
      <td>RESTPROXY/no_ssl_validation = False</td>
      <td>(BoolOpt) Disables SSL certificate validation for controllers</td>
    </tr>
    <tr>
      <td>RESTPROXY/organization = system</td>
      <td>(StrOpt) Organization name in which VSD will orchestrate network resources using openstack</td>
    </tr>
    <tr>
      <td>RESTPROXY/server = localhost:8800</td>
      <td>(StrOpt) IP Address and Port of Nuage's VSD server</td>
    </tr>
    <tr>
      <td>RESTPROXY/serverauth = username:password</td>
      <td>(StrOpt) Username and password for authentication</td>
    </tr>
    <tr>
      <td>RESTPROXY/serverssl = False</td>
      <td>(BoolOpt) Boolean for SSL connection with VSD server</td>
    </tr>
    <tr>
      <td>RESTPROXY/ssl_cert_directory = /etc/neutron/plugins/bigswitch/ssl</td>
      <td>(StrOpt) Directory containing ca_certs and host_certs certificate directories.</td>
    </tr>
    <tr>
      <td>RESTPROXY/ssl_sticky = True</td>
      <td>(BoolOpt) Trust and store the first certificate received for each controller address and use it to validate future connections to that address.</td>
    </tr>
    <tr>
      <td>RESTPROXY/thread_pool_size = 4</td>
      <td>(IntOpt) Maximum number of threads to spawn to handle large volumes of port creations.</td>
    </tr>
    <tr>
      <td>RESTPROXYAGENT/integration_bridge = br-int</td>
      <td>(StrOpt) Name of integration bridge on compute nodes used for security group insertion.</td>
    </tr>
    <tr>
      <td>RESTPROXYAGENT/polling_interval = 5</td>
      <td>(IntOpt) Seconds between agent checks for port changes</td>
    </tr>
    <tr>
      <td>RESTPROXYAGENT/virtual_switch_type = ovs</td>
      <td>(StrOpt) Virtual switch type.</td>
    </tr>
    <tr>
      <td>SDNVE/base_url = /one/nb/v2/</td>
      <td>(StrOpt) Base URL for SDN-VE controller REST API</td>
    </tr>
    <tr>
      <td>SDNVE/controller_ips = ['127.0.0.1']</td>
      <td>(ListOpt) List of IP addresses of SDN-VE controller(s)</td>
    </tr>
    <tr>
      <td>SDNVE/default_tenant_type = OF</td>
      <td>(StrOpt) Tenant type: OF (default) and OVERLAY</td>
    </tr>
    <tr>
      <td>SDNVE/format = json</td>
      <td>(StrOpt) SDN-VE request/response format</td>
    </tr>
    <tr>
      <td>SDNVE/info = sdnve_info_string</td>
      <td>(StrOpt) SDN-VE RPC subject</td>
    </tr>
    <tr>
      <td>SDNVE/integration_bridge = None</td>
      <td>(StrOpt) Integration bridge to use</td>
    </tr>
    <tr>
      <td>SDNVE/interface_mappings = []</td>
      <td>(ListOpt) List of &lt;physical_network_name&gt;:&lt;interface_name&gt;</td>
    </tr>
    <tr>
      <td>SDNVE/of_signature = SDNVE-OF</td>
      <td>(StrOpt) The string in tenant description that indicates the tenant is a OF tenant</td>
    </tr>
    <tr>
      <td>SDNVE/out_of_band = True</td>
      <td>(BoolOpt) Indicating if controller is out of band or not</td>
    </tr>
    <tr>
      <td>SDNVE/overlay_signature = SDNVE-OVERLAY</td>
      <td>(StrOpt) The string in tenant description that indicates the tenant is a OVERLAY tenant</td>
    </tr>
    <tr>
      <td>SDNVE/password = admin</td>
      <td>(StrOpt) SDN-VE administrator password</td>
    </tr>
    <tr>
      <td>SDNVE/port = 8443</td>
      <td>(StrOpt) SDN-VE controller port number</td>
    </tr>
    <tr>
      <td>SDNVE/reset_bridge = True</td>
      <td>(BoolOpt) Reset the integration bridge before use</td>
    </tr>
    <tr>
      <td>SDNVE/use_fake_controller = False</td>
      <td>(BoolOpt) If set to True uses a fake controller.</td>
    </tr>
    <tr>
      <td>SDNVE/userid = admin</td>
      <td>(StrOpt) SDN-VE administrator user id</td>
    </tr>
    <tr>
      <td>SDNVE_AGENT/polling_interval = 2</td>
      <td>(IntOpt) Agent polling interval if necessary</td>
    </tr>
    <tr>
      <td>SDNVE_AGENT/root_helper = sudo</td>
      <td>(StrOpt) Using root helper</td>
    </tr>
    <tr>
      <td>SDNVE_AGENT/rpc = True</td>
      <td>(BoolOpt) Whether using rpc</td>
    </tr>
    <tr>
      <td>SECURITYGROUP/enable_security_group = True</td>
      <td>(BoolOpt) Controls whether the neutron security group API is enabled in the server. It should be false when using no security groups or using the nova security group API.</td>
    </tr>
    <tr>
      <td>audit/api_audit_map = api_audit_map.conf</td>
      <td>(StrOpt) File containing mapping for api paths and service endpoints</td>
    </tr>
    <tr>
      <td>audit/namespace = openstack</td>
      <td>(StrOpt) namespace prefix for generated id</td>
    </tr>
    <tr>
      <td>cisco_csr_ipsec/status_check_interval = 60</td>
      <td>(IntOpt) Status check interval for Cisco CSR IPSec connections</td>
    </tr>
    <tr>
      <td>database/db_inc_retry_interval = True</td>
      <td>(BoolOpt) Whether to increase interval between db connection retries, up to db_max_retry_interval</td>
    </tr>
    <tr>
      <td>database/db_max_retries = 20</td>
      <td>(IntOpt) maximum db connection retries before error is raised. (setting -1 implies an infinite retry count)</td>
    </tr>
    <tr>
      <td>database/db_max_retry_interval = 10</td>
      <td>(IntOpt) max seconds between db connection retries, if db_inc_retry_interval is enabled</td>
    </tr>
    <tr>
      <td>database/db_retry_interval = 1</td>
      <td>(IntOpt) seconds between db connection retries</td>
    </tr>
    <tr>
      <td>database/use_db_reconnect = False</td>
      <td>(BoolOpt) Enable the experimental use of database reconnect on connection lost</td>
    </tr>
    <tr>
      <td>haproxy/loadbalancer_state_path = $state_path/lbaas</td>
      <td>(StrOpt) Location to store config and state files</td>
    </tr>
    <tr>
      <td>haproxy/user_group = nogroup</td>
      <td>(StrOpt) The user group</td>
    </tr>
    <tr>
      <td>heleoslb/admin_password = None</td>
      <td>(StrOpt) ESM admin password.</td>
    </tr>
    <tr>
      <td>heleoslb/admin_username = None</td>
      <td>(StrOpt) ESM admin username.</td>
    </tr>
    <tr>
      <td>heleoslb/async_requests = None</td>
      <td>(BoolOpt) Define if the requests have run asynchronously or not</td>
    </tr>
    <tr>
      <td>heleoslb/dummy_utif_id = None</td>
      <td>(StrOpt) Dummy user traffic Security Zone id for LBs</td>
    </tr>
    <tr>
      <td>heleoslb/esm_mgmt = None</td>
      <td>(StrOpt) ESM management root address</td>
    </tr>
    <tr>
      <td>heleoslb/inband_id = None</td>
      <td>(StrOpt) In band Security Zone id for LBs</td>
    </tr>
    <tr>
      <td>heleoslb/lb_flavor = small</td>
      <td>(StrOpt) choose LB image flavor to use, accepted values: small, medium</td>
    </tr>
    <tr>
      <td>heleoslb/lb_image = None</td>
      <td>(StrOpt) Load Balancer image id (Embrane LB)</td>
    </tr>
    <tr>
      <td>heleoslb/mgmt_id = None</td>
      <td>(StrOpt) Management Security Zone id for LBs</td>
    </tr>
    <tr>
      <td>heleoslb/oob_id = None</td>
      <td>(StrOpt) Out of band Security Zone id for LBs</td>
    </tr>
    <tr>
      <td>heleoslb/resource_pool_id = None</td>
      <td>(StrOpt) Shared resource pool id</td>
    </tr>
    <tr>
      <td>heleoslb/sync_interval = 60</td>
      <td>(IntOpt) resource synchronization interval in seconds</td>
    </tr>
    <tr>
      <td>ml2_brocade/address = </td>
      <td>(StrOpt) The address of the host to SSH to</td>
    </tr>
    <tr>
      <td>ml2_brocade/ostype = NOS</td>
      <td>(StrOpt) Unused</td>
    </tr>
    <tr>
      <td>ml2_brocade/password = password</td>
      <td>(StrOpt) The SSH password to use</td>
    </tr>
    <tr>
      <td>ml2_brocade/physical_networks = </td>
      <td>(StrOpt) Allowed physical networks</td>
    </tr>
    <tr>
      <td>ml2_brocade/username = admin</td>
      <td>(StrOpt) The SSH username to use</td>
    </tr>
    <tr>
      <td>ml2_odl/password = None</td>
      <td>(StrOpt) HTTP password for authentication</td>
    </tr>
    <tr>
      <td>ml2_odl/session_timeout = 30</td>
      <td>(IntOpt) Tomcat session timeout in minutes.</td>
    </tr>
    <tr>
      <td>ml2_odl/timeout = 10</td>
      <td>(IntOpt) HTTP timeout in seconds.</td>
    </tr>
    <tr>
      <td>ml2_odl/url = None</td>
      <td>(StrOpt) HTTP URL of OpenDaylight REST interface.</td>
    </tr>
    <tr>
      <td>ml2_odl/username = None</td>
      <td>(StrOpt) HTTP username for authentication</td>
    </tr>
    <tr>
      <td>netscaler_driver/netscaler_ncc_password = None</td>
      <td>(StrOpt) Password to login to the NetScaler Control Center Server.</td>
    </tr>
    <tr>
      <td>netscaler_driver/netscaler_ncc_uri = None</td>
      <td>(StrOpt) The URL to reach the NetScaler Control Center Server.</td>
    </tr>
    <tr>
      <td>netscaler_driver/netscaler_ncc_username = None</td>
      <td>(StrOpt) Username to login to the NetScaler Control Center Server.</td>
    </tr>
    <tr>
      <td>nvsd/nvsd_ip = 127.0.0.1</td>
      <td>(StrOpt) NVSD Controller IP address</td>
    </tr>
    <tr>
      <td>nvsd/nvsd_passwd = oc123</td>
      <td>(StrOpt) NVSD Controller password</td>
    </tr>
    <tr>
      <td>nvsd/nvsd_port = 8082</td>
      <td>(IntOpt) NVSD Controller Port number</td>
    </tr>
    <tr>
      <td>nvsd/nvsd_retries = 0</td>
      <td>(IntOpt) Number of login retries to NVSD controller</td>
    </tr>
    <tr>
      <td>nvsd/nvsd_user = ocplugin</td>
      <td>(StrOpt) NVSD Controller username</td>
    </tr>
    <tr>
      <td>nvsd/request_timeout = 30</td>
      <td>(IntOpt) NVSD controller REST API request timeout in seconds</td>
    </tr>
    <tr>
      <td>plumgriddirector/director_server = localhost</td>
      <td>(StrOpt) PLUMgrid Director server to connect to</td>
    </tr>
    <tr>
      <td>plumgriddirector/director_server_port = 8080</td>
      <td>(StrOpt) PLUMgrid Director server port to connect to</td>
    </tr>
    <tr>
      <td>plumgriddirector/password = password</td>
      <td>(StrOpt) PLUMgrid Director admin password</td>
    </tr>
    <tr>
      <td>plumgriddirector/servertimeout = 5</td>
      <td>(IntOpt) PLUMgrid Director server timeout</td>
    </tr>
    <tr>
      <td>plumgriddirector/username = username</td>
      <td>(StrOpt) PLUMgrid Director admin username</td>
    </tr>
    <tr>
      <td>radware/actions_to_skip = ['setup_l2_l3']</td>
      <td>(ListOpt) List of actions that we dont want to push to the completion queue</td>
    </tr>
    <tr>
      <td>radware/l2_l3_ctor_params = {'ha_ip_pool_name': 'default', 'allocate_ha_vrrp': True, 'ha_network_name': 'HA-Network', 'service': '_REPLACE_', 'allocate_ha_ips': True}</td>
      <td>(DictOpt) l2_l3 workflow constructor params</td>
    </tr>
    <tr>
      <td>radware/l2_l3_setup_params = {'data_ip_address': '192.168.200.99', 'data_port': 1, 'gateway': '192.168.200.1', 'ha_port': 2, 'data_ip_mask': '255.255.255.0'}</td>
      <td>(DictOpt) l2_l3 workflow setup params</td>
    </tr>
    <tr>
      <td>radware/l2_l3_workflow_name = openstack_l2_l3</td>
      <td>(StrOpt) l2_l3 workflow name</td>
    </tr>
    <tr>
      <td>radware/l4_action_name = BaseCreate</td>
      <td>(StrOpt) l4 workflow action name</td>
    </tr>
    <tr>
      <td>radware/l4_workflow_name = openstack_l4</td>
      <td>(StrOpt) l4 workflow name</td>
    </tr>
    <tr>
      <td>radware/service_adc_type = VA</td>
      <td>(StrOpt) Service ADC type</td>
    </tr>
    <tr>
      <td>radware/service_adc_version = </td>
      <td>(StrOpt) Service ADC version</td>
    </tr>
    <tr>
      <td>radware/service_cache = 20</td>
      <td>(IntOpt) service cache</td>
    </tr>
    <tr>
      <td>radware/service_compression_throughput = 100</td>
      <td>(IntOpt) service compression throughtput</td>
    </tr>
    <tr>
      <td>radware/service_ha_pair = False</td>
      <td>(BoolOpt) service HA pair</td>
    </tr>
    <tr>
      <td>radware/service_isl_vlan = -1</td>
      <td>(IntOpt) A required VLAN for the interswitch link to use</td>
    </tr>
    <tr>
      <td>radware/service_resource_pool_ids = []</td>
      <td>(ListOpt) Resource pool ids</td>
    </tr>
    <tr>
      <td>radware/service_session_mirroring_enabled = False</td>
      <td>(BoolOpt) Support an Alteon interswitch link for stateful session failover</td>
    </tr>
    <tr>
      <td>radware/service_ssl_throughput = 100</td>
      <td>(IntOpt) service ssl throughtput</td>
    </tr>
    <tr>
      <td>radware/service_throughput = 1000</td>
      <td>(IntOpt) service throughtput</td>
    </tr>
    <tr>
      <td>radware/vdirect_address = None</td>
      <td>(StrOpt) vdirect server IP address</td>
    </tr>
    <tr>
      <td>radware/vdirect_password = radware</td>
      <td>(StrOpt) vdirect user password</td>
    </tr>
    <tr>
      <td>radware/vdirect_user = vDirect</td>
      <td>(StrOpt) vdirect user name</td>
    </tr>
    <tr>
      <td>ssl/ca_file = None</td>
      <td>(StrOpt) CA certificate file to use to verify connecting clients</td>
    </tr>
    <tr>
      <td>ssl/cert_file = None</td>
      <td>(StrOpt) Certificate file to use when starting the server securely</td>
    </tr>
    <tr>
      <td>ssl/key_file = None</td>
      <td>(StrOpt) Private key file to use when starting the server securely</td>
    </tr>
  </table>
  <table>
    <caption>New default values</caption>
    <col width="33%"/>
    <col width="33%"/>
    <col width="33%"/>
    <thead>
      <tr>
        <td>Option</td>
        <td>Previous default value</td>
        <td>New default value</td>
      </tr>
    </thead>
    <tr>
      <td>allowed_rpc_exception_modules</td>
      <td>neutron.openstack.common.exception, nova.exception, cinder.exception, exceptions</td>
      <td>nova.exception, cinder.exception, exceptions</td>
    </tr>
    <tr>
      <td>default_log_levels</td>
      <td>amqp=WARN, amqplib=WARN, boto=WARN, eventlet.wsgi.server=WARN, keystone=INFO, qpid=WARN, sqlalchemy=WARN, suds=INFO</td>
      <td>amqp=WARN, amqplib=WARN, boto=WARN, qpid=WARN, sqlalchemy=WARN, suds=INFO, iso8601=WARN</td>
    </tr>
    <tr>
      <td>device_driver</td>
      <td>neutron.services.loadbalancer.drivers.haproxy.namespace_driver.HaproxyNSDriver</td>
      <td>neutron.services.loadbalancer.drivers.haproxy.namespace_driver.HaproxyNSDriver</td>
    </tr>
    <tr>
      <td>logging_context_format_string</td>
      <td>%(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user)s %(tenant)s] %(instance)s%(message)s</td>
      <td>%(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user_identity)s] %(instance)s%(message)s</td>
    </tr>
    <tr>
      <td>AGENT/minimize_polling</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <td>NOVA/vif_types</td>
      <td>unbound, binding_failed, ovs, ivs, bridge, 802.1qbg, 802.1qbh, hyperv, other</td>
      <td>unbound, binding_failed, ovs, ivs, bridge, 802.1qbg, 802.1qbh, hyperv, midonet, mlnx_direct, hostdev, other</td>
    </tr>
    <tr>
      <td>RESTPROXY/server_auth</td>
      <td>username:password</td>
      <td>None</td>
    </tr>
    <tr>
      <td>RESTPROXY/server_ssl</td>
      <td>False</td>
      <td>True</td>
    </tr>
    <tr>
      <td>RESTPROXY/servers</td>
      <td>localhost:8800</td>
      <td>localhost:8800</td>
    </tr>
    <tr>
      <td>SECURITYGROUP/firewall_driver</td>
      <td>neutron.agent.firewall.NoopFirewallDriver</td>
      <td>None</td>
    </tr>
    <tr>
      <td>fwaas/driver</td>
      <td>neutron.services.firewall.drivers.fwaas_base.NoopFwaasDriver</td>
      <td></td>
    </tr>
  </table>
  <table>
    <caption>Deprecated options</caption>
    <col width="50%"/>
    <col width="50%"/>
    <thead>
      <tr>
        <td>Deprecated option</td>
        <td>New Option</td>
      </tr>
    </thead>
    <tr>
      <td>nvp_controllers</td>
      <td>nsx_controllers</td>
    </tr>
    <tr>
      <td>NVP/nvp_gen_timeout</td>
      <td>NSX/nsx_gen_timeout</td>
    </tr>
    <tr>
      <td>dnsmasq_dns_server</td>
      <td>dnsmasq_dns_servers</td>
    </tr>
    <tr>
      <td>log_config</td>
      <td>log_config_append</td>
    </tr>
    <tr>
      <td>nvp_password</td>
      <td>nsx_password</td>
    </tr>
    <tr>
      <td>loadbalancer_state_path</td>
      <td>haproxy/loadbalancer_state_path</td>
    </tr>
    <tr>
      <td>user_group</td>
      <td>haproxy/user_group</td>
    </tr>
    <tr>
      <td>nvp_user</td>
      <td>nsx_user</td>
    </tr>
  </table>
</section>
