<section xmlns="http://docbook.org/ns/docbook"
  xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
  xml:id="trove-service">
  <title>Database service overview</title>
  <para>The Database service provides scalable and reliable cloud provisioning
    functionality for both relational and non-relational database engines. Users
    can quickly and easily use database features without the burden of
    handling complex administrative tasks. Cloud users and database
    administrators can provision and manage multiple database instances as
    needed.</para>
  <para>The Database service provides resource isolation at high performance
    levels, and automates complex administrative tasks such as deployment,
    configuration, patching, backups, restores, and monitoring.</para>
  <formalpara>
    <title>Process flow example</title>
    <para>This example is a high-level process flow for using Database
      services:</para>
  </formalpara>
  <procedure>
    <step><para>The OpenStack Administrator configures the basic infrastructure
        using the following steps:</para>
    <substeps>
      <step>
        <para>Install the Database service.</para>
      </step>
      <step>
        <para>Create an image for each type of database. For example, one for
          MySQL and one for MongoDB.</para>
        </step>
      <step>
        <para>Use the <command>trove-manage</command> command to import images
          and offer them to tenants.</para>
        </step>
        </substeps>
    </step>
    <step>
      <para>The OpenStack end user deploys the Database service using the following
        steps:</para>
    <substeps>
      <step>
        <para>Create a Database service instance using the
         <command>trove create</command>
        command.</para>
      </step>
      <step>
        <para>Use the <command>trove list</command> command to get the ID of
         the instance, followed by the <command>trove show</command> command to get the IP
         address of it.</para>
        </step>
      <step>
        <para>Access the Database service instance using typical database access
         commands. For example, with MySQL:</para>
        <screen><prompt>$</prompt> mysql -u myuser -p -h <replaceable>TROVE_IP_ADDRESS</replaceable> mydb</screen>
        </step>
        </substeps>
    </step>
  </procedure>
  <para>The Database service includes the following components:</para>
  <variablelist>
    <varlistentry>
      <term><code>python-troveclient</code> command-line client</term>
      <listitem><para>A CLI that communicates with the <code>trove-api</code>
          component.</para></listitem>
    </varlistentry>
    <varlistentry>
      <term><code>trove-api</code> component</term>
      <listitem><para>Provides an OpenStack-native RESTful API that supports
      JSON to provision and manage Trove instances.</para></listitem>
    </varlistentry>
    <varlistentry>
      <term><code>trove-conductor</code> service</term>
      <listitem><para>Runs on the host, and receives messages from guest
       instances that want to update information on the host.</para></listitem>
    </varlistentry>
    <varlistentry>
      <term><code>trove-taskmanager</code> service</term>
      <listitem><para>Instruments the complex system flows that support
       provisioning instances, managing the lifecycle of instances, and
       performing operations on instances.</para></listitem>
    </varlistentry>
    <varlistentry>
      <term><code>trove-guestagent</code> service</term>
      <listitem><para>Runs within the guest instance. Manages and performs
      operations on the database itself.</para></listitem>
    </varlistentry>
    </variablelist>

</section>